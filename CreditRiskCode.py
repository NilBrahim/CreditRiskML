# -*- coding: utf-8 -*-
"""Bankdataproject_full_cleaned.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tk94Becoq2PFo-q-zf9H5UQ61Zw4D3xU

# Bank Credit Risk Project

This project focuses on **credit risk assessment** using machine learning techniques to predict the probability of loan default among bank customers.

## Sections:
1. Setup & data loading
2. Preprocessing & encoding
3. Exploratory analysis
4. Modeling
5. Evaluation
"""

# === 1) Setup & data loading ===
import pandas as pd
import numpy as np
from sklearn.utils import shuffle
import matplotlib.pyplot as plt

# Load dataset (update path if needed)
data = pd.read_csv("bankconverted.csv")

print("Shape:", data.shape)
data.head()

# === 2) Preprocessing & encoding ===
def encode_column(df, column, mapping):
    """Replace categorical values in a column using a mapping dictionary."""
    df[column] = df[column].replace(mapping)
    return df

# Define mappings (taken directly from original notebook replacements)
mappings = {
    "moavaghe": {1: 0, 2: 1},
    "sex": {1: 0, 2: 1},
    "job": {1: 0, 2: 1},
    "marriage status": {1: 0, 2: 1},
    "housing": {1: 0, 2: 1},
    "city": {1: 0, 2: 1},
    "noe vam": {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5},
    "tedade ghest": {1: 0, 2: 1, 3: 2, 4: 3}
}

# Apply mappings
for col, mapping in mappings.items():
    if col in data.columns:
        data = encode_column(data, col, mapping)

print("Encoded dataset sample:")
data.head()

# === 3) Exploratory analysis ===
print("Missing values per column:")
print(data.isnull().sum())

print("\nSummary statistics:")
display(data.describe(include='all').transpose())

# Example plots (univariate distributions)
data.hist(figsize=(12, 8))
plt.tight_layout()
plt.show()

# === 4) Modeling ===
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report


TARGET = "delay"

if TARGET not in data.columns:
    raise ValueError(f"Target column '{TARGET}' not found in dataset. Please update.")

X = data.drop(columns=[TARGET])
y = data[TARGET]

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Train logistic regression (based on original simple modeling idea)
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# === 5) Evaluation ===
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, zero_division=0))
print("Recall:", recall_score(y_test, y_pred, zero_division=0))
print("F1 Score:", f1_score(y_test, y_pred, zero_division=0))

print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred, zero_division=0))